---
title: "Identification of Fatigue Inducers for Manual Material Handling Workers: An Investigation Using Functional ANOVA"
author:
  - name: Setareh Kazemi Kheiri
    orcid: 0000-0001-8917-1823
    email: skazemik@buffalo.edu
    affiliations:
      - name: Department of Industrial and Systems Engineering, University at Buffalo
        address: 429 Bell Hall
        city: Buffalo
        state: NY
        postal-code: 14260-2050
  - name: Zahra Vahedi
    orcid: 0000-0000-0000-0000
    email: zahravah@buffalo.edu
    affiliations:
      - name: Department of Industrial and Systems Engineering, University at Buffalo
        address: 429 Bell Hall
        city: Buffalo
        state: NY
        postal-code: 14260-2050
  - name: Lora A. Cavuoto
    orcid: 0000-0003-4717-8378
    email: loracavu@buffalo.edu
    corresponding: true
    affiliations:
      - name: Department of Industrial and Systems Engineering, University at Buffalo
        address: 407 Bell Hall
        city: Buffalo
        state: NY
        postal-code: 14260-2050
  - name: Fadel M. Megahed
    orcid: 0000-0003-2194-5110
    email: fmegahed@miamioh.edu
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Hongyue Sun
    orcid: 0000-0003-2871-5502
    email: hongyues@buffalo.edu
    affiliations:
      - name: Department of Industrial and Systems Engineering, University at Buffalo
        address: 319 Bell Hall
        city: Buffalo
        state: NY
        postal-code: 14260-2050
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: 
  html:
    code-fold: false
    code-tools: true
    code-download: true
    code-link: true
    highlight-style: pygments
    number-sections: true
    paged-df: true
    toc: true
    toc-float: true
    code-overflow: wrap
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  cache = TRUE,
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  progress = FALSE, 
  verbose = FALSE,
  fig.path = "figs/",
  cache.extra = set.seed(2022), 
  autodep = TRUE
)
options(qwraps2_markup = "markdown")

# fontawesome installation
if(require(fontawesome)==F) install.packages('fontawesome')


# Setting properties for the default theme_bw() behavior for all plots
if(require(ggplot2) == FALSE) install.packages("ggplot2")
library(ggplot2) ; theme_set(theme_bw(base_size = 11) + theme(legend.position = 'top')) 
# Setting default color palettes to RColorBrewer Palettes
if(require(RColorBrewer) == FALSE) install.packages("RColorBrewer")
scale_colour_discrete = scale_color_brewer(palette = "Dark2")
```


# Objectives of this Document {-}

This document provides the code, results and analysis for evaluating the development of fatigue during manual material handling (MMH) operations in a simulated warehousing environment. Our approach is divided into the following main steps: 

1. Data pre-processing;

1. Data transformation;

1. Functional ANOVA on the transformed data;

1. Data clustering; and

1. Functional ANOVA on the clustered transformed data

---

# R Setup and Required Packages

In this project, the open-source `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language is used for our analysis. `r fontawesome::fa(name = "r-project", fill = "steelblue")` is maintained by an international team of developers who make the language available at [The Comprehensive R Archive Network](https://cran.r-project.org/). Readers interested in reusing our code and reproducing our results should have `r fontawesome::fa(name = "r-project", fill = "steelblue")` installed locally on their machines. `r fontawesome::fa(name = "r-project", fill = "steelblue")` can be installed on a number of different operating systems (see [Windows](https://cran.r-project.org/bin/windows/), [Mac](https://cran.r-project.org/bin/macosx/), and [Linux](https://cran.r-project.org/bin/linux/) for the installation instructions for these systems). We also recommend using the RStudio interface for `r fontawesome::fa(name = "r-project", fill = "steelblue")`. The reader can [download RStudio](http://www.rstudio.com/ide) for free by following the instructions at the link. For non-R users, we recommend the [Hands-on Programming with R](https://rstudio-education.github.io/hopr/packages.html) for a brief overview of the software's functionality. Hereafter, we assume that the reader has an introductory understanding of the `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language.

In the code chunk below, we load the packages used to support our analysis. Our input and output files can also be accessed/ downloaded from <span style="color:red;font-weight:bold"> https://github.com/Setareh-Kazemi/Setareh-Kazemi.github.io/tree/main/functional_anova</span>.

```{r packages, cache=FALSE}
# create a files directory if it does not exist
if (!dir.exists('functional_anova_fatigue_files_SK')) {dir.create('functional_anova_fatigue_files_SK')}

# install the pacman package if it is not installed locally
if(require(pacman)==FALSE) install.packages("pacman") # library for pkg manager 

# p_load() will install (if needed) and then load the following package 
pacman::p_load(tidyr,
  tidyverse, # data analysis packages
  readxl, # pkg to read excel files
  DT, pander, # pkgs to print tables nicely
  imputeTS, # impute missing values to connect lines in our exploratory plots
  av, magick, # for creating videos,
  skimr, # for creating a nice summary table using the skim function
  forecast, # to obtain the optimal lambdas for the Box-Cox transformation
  conflicted, # to set the default pkg for common function names
  downlit, xml2, # packages required for code linking
  fda.usc, #to run the custom fanova functions
  cowplot #to show multiple ggplots together
  )

# setting the default for filter and select to be from the dplyr packages
conflicted::conflict_prefer('filter', 'dplyr')
conflicted::conflict_prefer('select', 'dplyr')

# load our custom functions
source('custom_functions_fanova_fatigue_SK.R')
```

---

# An Overview of the Experiment and Data

Data used in this study is driven from an experiment conducted to assess the fatigue accumulation of **upper limb fatigue** in a repetitive overhead load lifting task. The experiment was conducted with four different conditions, with varying: (a) **task weights:** 1.5 and 2.5 kg, and (b) **task paces:** 5, 10, and 15 bpm. The four conditions are based on the following combinations of pace and weights: 

- 5 bpm -- 2.5 kg,   
- 10 bpm -- 2-5 kg,   
- 15 bpm -- 2.5 kg, and   
- 15 bpm -- 1.5 kg   

Hereafter, we will drop the units for the sake of conciseness (e.g., 15 bpm -- 2.5 kg will be referred at as 15--2.5). 

A total of 17 people participated in this experiment. Each session of the experiment consisted of three 45-minute periods, with two 15-minute breaks in between the work periods. The [Borg 0-10 Ratings of Perceieved Exertion (RPE) Scale](https://my.clevelandclinic.org/health/articles/17450-rated-perceived-exertion-rpe-scale) were captured for each subject every 5 minutes of the experiment. Furthermore, isometric strength tests were taken every 9 minutes. 

Three types of sensors were attached to the subjects. Three actigraph sensors collected measurements of accelerometer, gyroscope, and magnetometer data from the right wrist, right arm, and trunk of the subject. One Empatica sensor collected the acceleration from the left hand of the subject. A polar sensor collected the heart rate of each subject throughout the experiment. 

In this analysis only the data related to the first 45 minute of experiments were used to assess the impact of task characteristics on the accumulated fatigue, as well as comparing the two fatigue indicators (RPE and muscle strength).


---

# Reading the Experimental Data

## Extracting File Names for Strength & RPE Data

In the code chunk below, we extract the file names for the strength and RPE data
for each subject. We capitalize on the base function `list.files()` and we use
**regular expressions** to extract **the names of all the**: (a) *strength files*
(based on the fact that their name is a single numeric digit followed by .xlsx extension);
and (b) *RPE files* (based on that all RPE files are named RPE.xlsx). The use of `full.names` allow us to capture the subject, session, period and strength measurement numbers from the file path.

```{r extract_file_names}
strength_file_names = list.files(
  path = 'data', full.names = T, recursive = T, pattern = '*[0-9]{1}.xlsx'
)

rpe_file_names = list.files(
  path = 'data', full.names = T, recursive = T, pattern = 'RPE.xlsx'
)
```

## Reading File Describing Experimental Design

```{r read_exp_design}
exp_order_by_subject = readxl::read_xlsx("data/experimental_design.xlsx", sheet = "For analysis", range = "B2:V6")

# changing col names to that the subject naming convention is similar to folder structure
colnames(exp_order_by_subject) = stringr::str_replace(
  string = colnames(exp_order_by_subject), pattern = 'Sub', replacement = 'subj')

exp_order_by_subject = exp_order_by_subject %>% 
  dplyr::mutate(
    # changing session names to match convention similar to folder structure
    Session = stringr::str_replace(Session, 'Session', 'session0'),
    # removing Condition from all subject columns
    dplyr::across(.cols = dplyr::contains('subj'), 
           .fns = ~ stringr::str_remove(., 'Condition '))
    )

# printing the session order for each subject
DT::datatable(
  data = exp_order_by_subject, rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 1)
  )
)
```

## Reading the RPE Files

Using the `map_df()` from the purrr package, we can apply our custom function titled `read_rpe_data()` to all the RPE data files. The `read_rpe_data()` is part of our script file titled `custom_functions_fanova_fatigue.R`. The output is one row of data corresponding to the RPEs reported by each subject in a given session and period from our experiment. 

```{r read_rpe}
rpe_df = purrr::map_df(.x = rpe_file_names, .f = read_rpe_data)
```


## Reading the Strength Files

Using the `map_df()` from the purrr package, we can apply our custom function titled `read_strength_data()` to all the strength data files. The `read_strength_data()` is part of our script file titled `custom_functions_fanova_fatigue.R`. The output is one row of data corresponding to the maximum strength reported by each subject in a given session, period, and strength measurement (i.e., ~ every 9 minutes) from our experiment. 

```{r read_strength}
strength_df = purrr::map_df(.x = strength_file_names, .f = read_strength_data)
```

## Adding Time to Strength Data

In the code chunk below, we utilize the `data/experimental_details.xlsx` file to extract the experimental time in minutes when the isometric strength tests were performed for each subject-session-period.

```{r strength_time}
strength_time_df = readxl::read_excel(
  "data/experimental_details.xlsx", sheet = "For analysis", range = "A2:F2000") %>% 
  drop_na(Time)

# modifying strength_time_df's column names to follow strength_df naming conventions
colnames(strength_time_df) = c('subject', 'session', 'period', 'unique_code', 'strength_meas_num', 'time')

strength_time_df = 
  strength_time_df %>% 
  # modifying the values within the strength_time_df to match strength_df values
  dplyr::select(-c(unique_code)) %>% 
  dplyr::mutate(subject = stringr::str_replace(subject, 'Sub', 'subj'),
         session = stringr::str_replace(session, 'Session', 'session0'),
         period = stringr::str_extract(period, '[:digit:]{1}'),
         time = as.numeric(time)
         ) %>% 
  # and joining with strength_df
  dplyr::right_join(
    y = strength_df,
    by = c('subject', 'session', 'period', 'strength_meas_num')
  )
```

## Reading the Subject's Anthropometric Data

```{r anthro_read}
anthro_df = readxl::read_excel('data/subject_anthropometrics.xlsx', n_max = 20) %>% 
  dplyr::mutate(subject = stringr::str_replace(`Sub#`, 'Sub', 'subj'),
         Session = paste0('session0', Session)) %>% 
  dplyr::select(-c(`Sub#`)) %>% # drop `Sub#` co since it is now redundant w/ subject
  dplyr::relocate(subject) # move subject column to front

colnames(anthro_df) = c('subject', 'session', 'sex', 'age', 'height_cm', 
                        'weight_kg', 'waist_circumf_cm', 'hip_circumf_cm', 'bmi')
```

---

# Data Preparation

## Merging the Different Datasets

In the code chunk below, we perform the following operations:  

- we convert the experimental order dataset into a **tall** dataset, consisting of 5 columns: (a) subject, (b) session, (c) experimental condition, (d) load, and (e) pace.  
- we use **join** operations to join the following datasets together: (a) `strength_time_df`, (b) `rpe_data`, (c) `anthro_df`, and (d) `exp_order_by_subject_tall`.  

- we relocate the `exp_condition` column to be after the `session` column.

```{r merging_rpe_strength_individualCharcteristics}
# converting the experimental order into a tall data frame
exp_order_by_subject_tall = 
   exp_order_by_subject %>% 
  dplyr::rename(session = Session) %>% 
  tidyr::pivot_longer(cols = dplyr::contains('subj'),
               names_to = 'subject',
               values_to = 'exp_condition')  %>% 
  tidyr::separate(exp_condition, sep = '-', into = c('load', 'pace'), remove = F)

full_df = 
  # joining strength and rpe data
  dplyr::full_join(
    x = strength_time_df, y = rpe_df,
    by = c('subject', 'session', 'period', 'time')
  ) %>% 
  # adding to them the individual characteristics
  dplyr::left_join(
    y = anthro_df %>% dplyr::select(-c(session)),
    by = c('subject')
  ) %>%
  # adding session information
  dplyr::left_join(
    y = exp_order_by_subject_tall,
    by = c('subject', 'session')
  ) %>% 
  dplyr::relocate('exp_condition', .after = 'session')

readr::write_rds(x = full_df, file = 'data/outputs/full_df.rds')

# print the full_df nicely for a quick visual inspection
DT::datatable(
  data = full_df, rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('height_cm','weight_kg', 'waist_circumf_cm', 'hip_circumf_cm', 'bmi'), 
    digits = 2)
```


## Filtering to First Period

For our analysis in this paper, we filter the data to include only strength measurements and RPEs observed in the first period. Our rationale for ignoring the other periods in this study is based on our hypothesis that rest breaks may not lead to a full recovery (either perceived or in the isometric strength), and hence, we will focus on **only the first (pre-rest break) period** in our analysis. Furthermore, we removed observations: 

- where **both** the `max_load` and `rpe` variables were `NA`.  
- for `subj11`, `subj12`, `subj14` who either did not finish all sessions for our experiment or had unreliable measurement data.  
- the RPE values during rest breaks since we are not focused on recovery in this study.  

Additionally, we imputed the `NA` time values for the subjects who finished the experiment early based on the time for the previous observation (which contained an RPE value of 10).

```{r period1}
period1_df = full_df %>% 
  dplyr::filter(
    # focusing on period1 data only for this study
    period == '1',
    
    # removing obs where both the `max_load` and `rpe` variables were `NA`
    !dplyr::if_all(.cols = c(max_load, rpe), .fns = is.na),
    
    # removing obs for subjects who did not finish experiment or had unreliable data
    !subject %in% c('subj11', 'subj12', 'subj14')
    ) %>% 
  dplyr::arrange(subject, session, time)

# removing first rest break RPEs
index_resting_rpe = which( !is.na(period1_df$rpe) & period1_df$type == 'rest' )
period1_df = period1_df[-index_resting_rpe, ]

# row numbers for subjects finishing early and had a strength test at end of exp
index_early_finish = which( is.na(period1_df$time) & !is.na(period1_df$max_load) ) 
period1_df = impute_time_last_rpe(index = index_early_finish, df = period1_df)

# deleting last RPE data for early finish since it is now included with 
# the last strength row for each session based on the custom impute function
period1_df = period1_df[-c(index_early_finish - 1), ]
period1_df = unique(period1_df)

# deleting the subject 7, condition 2.5-5, because the last strength data 
# is a missing value but there is a reported RPE
period1_df = period1_df[-which(period1_df$subject=="subj07" & period1_df$exp_condition=="2.5-5"),]

```


## Computing Change in Max Load Per Session

In the code chunk below, we compute the **fraction of the subject's max_load per session** namely, **STR**, and we sort the data in an increasing time order by subject-session. 

```{r chg_max_load}
period1_df = 
  period1_df %>% 
  dplyr::group_by(subject, session) %>% 
  dplyr::mutate( STR = max_load/head(max_load, n = 1) ) %>% 
  dplyr::relocate(STR, .after = max_load) %>% 
  dplyr::arrange(time, .by_group = T) %>% 
  ungroup()

readr::write_rds(x = period1_df, file = 'data/outputs/period1_df.rds')
```

---

# An Exploratory Investigation of the RPE and Strength Data

## Plotting the RPE and Strength Data

In the code chunk below, we utilize our custom function `rpe_str_plot()` to plot the Strength and RPE data for each of our participants. The plots are saved in our `figs` sub folder and a paus-able animated movie is shown so patterns across subjects can be discovered. 

```{r rpe_str_plots1, results='hide'}
# creating a vector of unique subject names/ids
subjects = unique(period1_df$subject)

# using a vectorized approach to create a plot for each subject
plots = purrr::map(.x = subjects, .f = rpe_str_plot, df = period1_df, 
            cols_to_plot = c('STR', 'rpe'))

# read the generated figures and convert them into a video
fig_files = list.files('figs_SK/', full.names = T)
fig_files = fig_files[stringr::str_detect(fig_files, pattern = 'rpe_str_subj')]

fig_files %>% 
  purrr::map(.f = magick::image_read) %>% # reads each img from the extracted path file
  magick::image_join() %>% # joins the images
  magick::image_write_video(path ="figs_SK/rpe_str_all_subjects.mp4", framerate = 0.25)

# include the video in the code output below
knitr::include_graphics('figs_SK/rpe_str_all_subjects.mp4')
```

```{r rpe_str_plots2, echo=FALSE}
# we include it in a separate chunk and hide the previous chunks results
# since the image_write_video() produces a lot of output that is not needed to
# be shown in our markdown
knitr::include_graphics('figs_SK/rpe_str_all_subjects.mp4')
```

```{r rpe_str_plots3, include = FALSE}

# using a vectorized approach to create a plot for subjects 4 and 6 to be demonstrated side by side in the paper

plot_subj04 = purrr::map(.x = "subj04", .f = rpe_str_plot_one, df = period1_df, 
            cols_to_plot = c('STR', 'rpe'))
plot_subj06 = purrr::map(.x = "subj06", .f = rpe_str_plot_one, df = period1_df, 
            cols_to_plot = c('STR', 'rpe'))

joint_plot_4_6 = ggpubr::ggarrange(plot_subj04[[1]] , plot_subj06[[1]])

ggplot2::ggsave(filename = paste0('figs_SK/', 'joint_plot_subj04_subj06', '.png'),
                  plot = joint_plot_4_6,
                  dpi = 600, width = 13, height = 4.5)
```



## Summary Statistics By Subject-Session

Below we provide, summary statistics grouped by subject and session (i.e., the combination of load and pace). The summary table can be searched, sorted and scrolled in the *x-*direction. 

```{r skim_stats}
period1_df %>% 
  dplyr::select(subject, load, pace, max_load, STR, rpe ) %>% 
  dplyr::group_by(subject, load, pace) %>% 
  skimr::skim() %>% 
  DT::datatable(
    rownames = F,
    extensions = c('Buttons','FixedColumns'),
    options = list(
      dom = 'Bfrtip',
      buttons = c('csv', 'excel', 'pdf', 'print'),
      paging = TRUE, searching = TRUE, info = FALSE,
      sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 5))) %>% 
  DT::formatRound(columns = 7:14, digits = 2)
```


---

# Functional ANOVA

## To Wide Dataset

In the code chunk below, we transform our `period1_df` dataset so that it can be evaluated using functional ANOVA. The transformation is such that: (a) every column corresponds to a specific subject $\times$ experimental condition combination, and (b) every row corresponds to a time period in $0, \, 9, \, 18, \, \dots, \, 45$ for STR and in $0, \, 5, \, 10, \, \dots, \, 45$ for RPE. Note that we limited the subject $\times$ experimental condition combinations to sessions, where the subjects have completed the experiment (i.e., the last strength measurement was taken at $time = 45$ minutes). To achieve this transformation, our custom_function `pivot_wider_anova()` performs the following steps:  

- Selects the columns `subject, exp_condition, time` and the response variable column `STR` or `rpe` from the dataset.  
- Utilizes the `tidyr::pivot_wider()` to pivot our dataset into a wide dataset. The column names are specified by the combination of `c(subject, exp_condition)` and the value within these cells are from the our response column.  
- Filters the rows, keeping only rows that are divisible by `time_sep=9` minutes for `STR`, and `time_sep=5` for `rpe`, since our strength measurements were obtained every 9 minutes and RPEs were reported every 5 minutes. In addition, it drops any columns that contain `NA`.  
- Furthermore, it assigns the row names based on the `time` column, and then drops this column since this information is no longer needed.

```{r strength_df_wide}
period1_strength = 
  pivot_wider_anova(
    df = period1_df, response_var_name = 'STR', time_sep = 9
    )

readr::write_rds(x = period1_strength, file = 'data/outputs/period1_strength.rds')
```

```{r rpe_df_wide}
period1_rpe = 
  pivot_wider_anova(
    df = period1_df, response_var_name = 'rpe', time_sep = 5
    )

readr::write_rds(x = period1_rpe, file = 'data/outputs/period1_rpe.rds')
```

## Optimal $\lambda$ and the Box-Cox Transformation

We applied our custom concentrated likelihood function (based on [Lindsey and Sheather 2010](https://journals.sagepub.com/doi/epdf/10.1177/1536867X1001000108)) to find the optimal lambda for each time period. Note that we remove time period zero for the relative strength since all the values were equal to 1. We also added 1 to all values of RPE to avoid errors for the transformation of RPEs reported as zero. The output from this code chunk is a transformed and transposed matrix that contains our transformed relative strength and RPE values for each subject-condition (rows), and time period (columns). 

```{r optimal_lambda_strength}
opt_lambda_transformed_lst_STR = conc_lik(period1_strength[-1,])

opt_lambda_vec_STR = opt_lambda_transformed_lst_STR$lambdas

period1_strength_transformed = opt_lambda_transformed_lst_STR$transformed_variable

opt_lambda_vec_STR
```

```{r optimal_lambda_rpe}

opt_lambda_transformed_lst_rpe = conc_lik(period1_rpe+1)

opt_lambda_vec_rpe = opt_lambda_transformed_lst_rpe$lambdas

period1_rpe_transformed = opt_lambda_transformed_lst_rpe$transformed_variable

opt_lambda_vec_rpe
```

## FANOVA on the Relative Strength

```{r fanova_str}

s_t_fdata = fda.usc::fdata(period1_strength_transformed, argvals=seq(1,5,length.out = 5), rangeval = c(1,5), names = NULL, fdata2d = FALSE)

period1_strength_transformed_df = 
  period1_strength_transformed %>% 
  as.data.frame() %>% 
  dplyr::mutate(
    id = row.names(period1_strength_transformed)
    ) 

period1_strength_transformed_w_labels = 
  dplyr::left_join(
    x = period1_strength_transformed_df,
    y = period1_df %>% 
      dplyr::mutate(id = paste0(subject,'_',exp_condition)) %>% 
      dplyr::select(c(id, load, pace, sex)),
    by = c('id' = 'id')
  ) %>% 
  unique() %>% 
  dplyr::select(-c(id)) %>% 
  dplyr::mutate(
    load = factor(load, levels = c('1.5', '2.5')),
    pace = factor(pace, levels = c('5', '10', '15')),
    sex = factor(sex, levels = c('M','F')))
 
# Inputs to fanova
data.fac_S = data.frame(
  labels_pace = period1_strength_transformed_w_labels$pace,
  labels_load = period1_strength_transformed_w_labels$load
)

fml_NNT_S= ~labels_pace+labels_load

fanova_strength_df = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = s_t_fdata, 
      formula = fml_NNT_S,
      data.fac = data.fac_S,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2])
  )


# print the analysis results
DT::datatable(
  data = fanova_strength_df[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load'), 
    digits = 2)
```

```{r smooth_strength}

smooth_STR = smooth_functional_var(nbasis = 5, var = t(period1_strength[-1,]))$smooth_var
smooth_TSTR = smooth_functional_var(nbasis = 5, var = period1_strength_transformed)$smooth_var

```

## FANOVA on the RPE

```{r fanova_rpe}

r_t_fdata = fda.usc::fdata(period1_rpe_transformed, argvals=seq(1,10,length.out = 10), rangeval = c(1,10), names = NULL, fdata2d = FALSE)

period1_rpe_transformed_df = 
  period1_rpe_transformed %>% 
  as.data.frame() %>% 
  dplyr::mutate(
    id = row.names(period1_rpe_transformed)
    ) 

period1_rpe_transformed_w_labels = 
  dplyr::left_join(
    x = period1_rpe_transformed_df,
    y = period1_df %>% 
      dplyr::mutate(id = paste0(subject,'_',exp_condition)) %>% 
      dplyr::select(c(id, load, pace, sex)),
    by = c('id' = 'id')
  ) %>% 
  unique() %>% 
  dplyr::select(-c(id)) %>% 
  dplyr::mutate(
    load = factor(load, levels = c('1.5', '2.5')),
    pace = factor(pace, levels = c('5', '10', '15')),
    sex = factor(sex, levels = c('M','F')))
 
# Inputs to fanova
data.fac_R = data.frame(
  labels_pace = period1_rpe_transformed_w_labels$pace,
  labels_load = period1_rpe_transformed_w_labels$load
)

fml_NNT_R= ~labels_pace+labels_load

fanova_rpe_df = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = r_t_fdata, 
      formula = fml_NNT_R,
      data.fac = data.fac_R,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2])
  )


# print the analysis results
DT::datatable(
  data = fanova_rpe_df[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load'), 
    digits = 2)
```

```{r smooth_rpe}

smooth_RPE = smooth_functional_var(nbasis = 10, var = t(period1_rpe))$smooth_var
smooth_TRPE = smooth_functional_var(nbasis = 10, var = period1_rpe_transformed)$smooth_var

```
# Clustering

In order to tackle the subjects' heterogeneity, functional and gender clustering was conducted on the transformed relative strength and RPE to later be incorporated into the FANOVA analysis and test whether the clusters had a significant impact and helped further in finding the impact of task characteristics or not.

## Functional Clustering

```{r funhddc_strength}

# Clustering to two clusters
functional_cluster_2_TSTR = functional_clustering(smooth_TSTR, k=2)$cluster_label

# Clustering to more than two clusters
functional_cluster_g2_TSTR = functional_clustering(smooth_TSTR, k=3:7)$cluster_label

```

```{r funhddc_rpe}

# Clustering to two clusters
functional_cluster_2_TRPE = functional_clustering(smooth_TRPE, k=2)$cluster_label

# Clustering to more than two clusters
functional_cluster_g2_TRPE = functional_clustering(smooth_TRPE, k=3:7)$cluster_label

```

## Plots of smooth TRPE and TSTR

```{r plot_smooth}

plot_smooth_c2 = plot_smooth(smooth_RPE, smooth_TRPE, smooth_STR, smooth_TSTR, "c2" , smooth_factor = 0.2, fig_path ='figs_SK/')

plot_smooth_c2

plot_smooth_cg2 = plot_smooth(smooth_RPE, smooth_TRPE, smooth_STR, smooth_TSTR, cluster = "cg2" , smooth_factor = 0.2, fig_path ='figs_SK/')

plot_smooth_cg2

plot_smooth_cg = plot_smooth(smooth_RPE, smooth_TRPE, smooth_STR, smooth_TSTR, "cg" , smooth_factor = 0.2, fig_path ='figs_SK/')

plot_smooth_cg
```


# FANOVA with Clusters

```{r fanova_strength_cluster}

period1_strength_transformed_w_labels = 
  period1_strength_transformed_w_labels %>%
  dplyr::mutate(
    c2 = factor(functional_cluster_2_TSTR),
    cg2 = factor(functional_cluster_g2_TSTR)
    )
 
# Inputs to fanova with 2 functional clusters
data.fac_S_c2 = data.frame(
  labels_pace = period1_strength_transformed_w_labels$pace,
  labels_load = period1_strength_transformed_w_labels$load,
  labels_c2 = period1_strength_transformed_w_labels$c2
)

fml_NNT_S_c2= ~labels_pace+labels_load+labels_c2

fanova_strength_df_c2 = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = s_t_fdata, 
      formula = fml_NNT_S_c2,
      data.fac = data.fac_S_c2,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2]),
    mean_p_val_c2 = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[3])
  )


# print the analysis results

DT::datatable(
  data = fanova_strength_df_c2[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load','mean_p_val_c2'), 
    digits = 2)

# Inputs to fanova with greater than 2 functional clusters
data.fac_S_cg2 = data.frame(
  labels_pace = period1_strength_transformed_w_labels$pace,
  labels_load = period1_strength_transformed_w_labels$load,
  labels_cg2 = period1_strength_transformed_w_labels$cg2
)

fml_NNT_S_cg2= ~labels_pace+labels_load+labels_cg2

fanova_strength_df_cg2 = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = s_t_fdata, 
      formula = fml_NNT_S_cg2,
      data.fac = data.fac_S_cg2,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2]),
    mean_p_val_cg2 = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[3])
  )


# print the analysis results
DT::datatable(
  data = fanova_strength_df_cg2[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load','mean_p_val_cg2'), 
    digits = 2)

# Inputs to fanova with gender clusters
data.fac_S_sex = data.frame(
  labels_pace = period1_strength_transformed_w_labels$pace,
  labels_load = period1_strength_transformed_w_labels$load,
  labels_sex = period1_strength_transformed_w_labels$sex
)

fml_NNT_S_sex= ~labels_pace+labels_load+labels_sex

fanova_strength_df_sex = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = s_t_fdata, 
      formula = fml_NNT_S_sex,
      data.fac = data.fac_S_sex,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2]),
    mean_p_val_sex = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[3])
  )


# print the analysis results
DT::datatable(
  data = fanova_strength_df_sex[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load','mean_p_val_sex'), 
    digits = 2)
```

```{r fanova_rpe_cluster}

period1_rpe_transformed_w_labels = 
  period1_rpe_transformed_w_labels %>%
  dplyr::mutate(
    c2 = factor(functional_cluster_2_TRPE),
    cg2 = factor(functional_cluster_g2_TRPE))
 
# Inputs to fanova with 2 functional clusters
data.fac_R_c2 = data.frame(
  labels_pace = period1_rpe_transformed_w_labels$pace,
  labels_load = period1_rpe_transformed_w_labels$load,
  labels_c2 = period1_rpe_transformed_w_labels$c2
)

fml_NNT_R_c2= ~labels_pace+labels_load+labels_c2

fanova_rpe_df_c2 = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = r_t_fdata, 
      formula = fml_NNT_R_c2,
      data.fac = data.fac_R_c2,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2]),
    mean_p_val_c2 = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[3])
  )


# print the analysis results
DT::datatable(
  data = fanova_rpe_df_c2[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load','mean_p_val_c2'), 
    digits = 2)

# Inputs to fanova with greater than 2 functional clusters
data.fac_R_cg2 = data.frame(
  labels_pace = period1_rpe_transformed_w_labels$pace,
  labels_load = period1_rpe_transformed_w_labels$load,
  labels_cg2 = period1_rpe_transformed_w_labels$cg2
)

fml_NNT_R_cg2= ~labels_pace+labels_load+labels_cg2

fanova_rpe_df_cg2 = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = r_t_fdata, 
      formula = fml_NNT_R_cg2,
      data.fac = data.fac_R_cg2,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2]),
    mean_p_val_cg2 = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[3])
  )


# print the analysis results
DT::datatable(
  data = fanova_rpe_df_cg2[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load','mean_p_val_cg2'), 
    digits = 2)

# Inputs to fanova with gender clusters
data.fac_R_sex = data.frame(
  labels_pace = period1_rpe_transformed_w_labels$pace,
  labels_load = period1_rpe_transformed_w_labels$load,
  labels_sex = period1_rpe_transformed_w_labels$sex
)

fml_NNT_R_sex= ~labels_pace+labels_load+labels_sex

fanova_rpe_df_sex = tidyr::crossing(
  nboot = seq(50, 200, 50),
  RP = seq(25,200,25)
) %>% 
  dplyr::mutate(
    fanova_fit = purrr::map2(
      .x = nboot, .y = RP, 
      .f = fanova,
      object = r_t_fdata, 
      formula = fml_NNT_R_sex,
      data.fac = data.fac_R_sex,
      alpha = 0.9
    ),
    
    # p_values_list = map(.x = fanova_fit, .f = function(x) x$resboot),
    mean_p_val_pace = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[1]),
    mean_p_val_load = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[2]),
    mean_p_val_sex = map_dbl(.x = fanova_fit, .f = function(x) x$p.Boot[3])
  )


# print the analysis results
DT::datatable(
  data = fanova_rpe_df_sex[,-3], rownames = F, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = c('mean_p_val_pace','mean_p_val_load','mean_p_val_sex'), 
    digits = 2)

```
## Benchmark models

To compare the results of FANOVA with methods which do not capture the functional property of variables, a two-way ANOVA and a repeated-measures ANOVA were conducted on the same set of data.

### Two-way ANOVA

In the two-way ANOVA the average TRPE and TSTR values over time were considered as the response variables. Task pace and load were examined as contributing factors. 

```{r manova_strength}

# Renaming the first five columns and adding a column for the average of each row (for each subject-condition)
period1_strength_transformed_w_labels = 
  period1_strength_transformed_w_labels %>% 
  rename_with(~str_remove(.x, "\\^.*"), 1:5) %>%
  dplyr::mutate( average = rowMeans(across(1:5)) )

# Two-way ANOVA on TSTR

manova_TSTR = stats::aov(average ~ load + pace, data = period1_strength_transformed_w_labels)
summary_manova_TSTR = as.data.frame(summary(manova_TSTR)[[1]])

# print the analysis results
DT::datatable(
  data = summary_manova_TSTR, rownames = T, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = 2:5, 
    digits = 2)
```

```{r manova_rpe}

# Renaming the first five columns and adding a column for the average of each row (for each subject-condition)
period1_rpe_transformed_w_labels = 
  period1_rpe_transformed_w_labels %>% 
  rename_with(~ str_remove(.x, "\\^.*"), 1:10) %>%
  dplyr::mutate( average = rowMeans(across(1:10)) )

# Two-way ANOVA on TSTR

manova_TRPE = stats::aov(average ~ load + pace, data = period1_rpe_transformed_w_labels)
summary_manova_TRPE = as.data.frame(summary(manova_TRPE)[[1]])

# print the analysis results
DT::datatable(
  data = summary_manova_TRPE, rownames = T, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = 2:5, 
    digits = 2)
```

### Repeated-measures NAOVA

In the repeated measures ANOVA, we treated various TRPE scores and TSTR measures as repeated measurements of our response variables. Time, pace, and load were recognized as contributing factors in this analysis.

```{r repeated_aov_strength}
# making a long table to have time as a column
period1_strength_transformed_w_labels_long = period1_strength_transformed_w_labels %>% 
  pivot_longer(cols = 1:5, names_to = "time") %>% 
  mutate(time = as.numeric(time))

# repeated measures anova on the transformed strength values
anova_TSTR = aov(value~load+pace+time, data = period1_strength_transformed_w_labels_long)

summary_anova_TSTR = as.data.frame(summary(anova_TSTR)[[1]])

# print the analysis results
DT::datatable(
  data = summary_anova_TSTR, rownames = T, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = 2:5, 
    digits = 2)
```
```{r repeated_aov_rpe}
# making a long table to have time as a column
period1_rpe_transformed_w_labels_long = period1_rpe_transformed_w_labels %>% 
  pivot_longer(cols = 1:10, names_to = "time") %>% 
  mutate(time = as.numeric(time))

# repeated measures anova on the transformed strength values
anova_TRPE = aov(value~load+pace+time, data = period1_rpe_transformed_w_labels_long)

summary_anova_TRPE = as.data.frame(summary(anova_TRPE)[[1]])

# print the analysis results
DT::datatable(
  data = summary_anova_TRPE, rownames = T, 
  extensions = c('Buttons','FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    buttons = c('csv', 'excel', 'pdf', 'print'),
    paging = TRUE, searching = TRUE, info = FALSE,
    sort = TRUE, scrollX = TRUE, fixedColumns = list(leftColumns = 4)
  ) 
) %>% 
  DT::formatRound(
    columns = 2:5, 
    digits = 2)
```

# Concluding Remarks
In this R Markdown document, we have shown that considering the whole functional curve of fatigue indicators, TRPE and TSTR, can provide insights into understanding the impact of task factors, load and pace, on the development of upper extremities' fatigue. Specifically, we have shown that:  

- The FANOVA analysis reveals that both task factors had a significant impact on both fatigue indicators.  

- The implementation of Functional clustering proves effective in addressing heterogeneity and elucidating the significant impact of both task factors on fatigue indicators.

- While both approaches to functional clustering yield similar results, gender-based clustering demonstrates a comparatively inferior performance. Nevertheless, the analysis utilizing gender clustering still supports the same findings as the analyses employing functional clusters, confirming that both task factors significantly impact the fatigue indicators. 

- Unlike two-way ANOVA and repeated-measures ANOVA, FANOVA considers the entire functional curves, thereby capturing the temporal dynamics of fatigue development. While two-way ANOVA and repeated-measures ANOVA fail to capture the significant impact of task factors on fatigue indicators, the FANOVA method succeeds at demonstrating that.

The details of this study and results can be found in our paper entitled: "Functional ANOVA for Upper Extremity Fatigue Analysis during Dynamic Order Picking".


---

# Appendix
In this appendix, we print all the R packages used in our analysis and their versions to assist with reproducing our results/analysis.

```{r sessionInfo}
pander(sessionInfo(), compact = TRUE) # printing the session info
```